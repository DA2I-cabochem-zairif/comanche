#!/usr/bin/perl

use Socket;

sub lireFichier
{
    
}

sub simple_serveur
{
    %set = lireFichier();
    socket(SERVEUR, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
    setsockopt(SERVEUR, SOL_SOCKET, SOREUSEADDR, 1);

    $mon_adresse = sockaddr_in($set{"port"}, INADDR_ANY);

    bind(SERVEUR,$mon_adresse) || die("bind");

    listen(SERVEUR, $set{"clients"}) || die("listen");
    autoflush CLIENT 1;
    while(accept(CLIENT, SERVEUR))
    {
	$pid = fork;
	if($pid == 0)
	{
	    while(<CLIENT>)
	    {
		print CLIENT $_;
	    }
	    exit 0;
	}
    }
    close (SERVEUR);
}

sub get_request
{
    %set = lireFichier();
    socket(SERVEUR, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
    $adresse = inet_aton(@ARGV[0]) || die("inet_aton");
    $adresse_complete = sockaddr_in($set{"port"}, $adresse) || die ("sock_addr");
    connect(SERVEUR,$adresse_complete) || die("connect");

    autoflush SERVEUR 1;
    printf SERVEUR "GET /$ARGV[1] HTTP/1.1\n";
    printf SERVEUR "Host:$ARGV[0]\n";
    printf SERVEUR "\n";

    while (<SERVEUR>)
    {
	print $_;
    }

    close (SERVEUR);
}

sub parse_request
{
    @request = split("/",$_[0]);
    $client = $request[0],"\n";
    $fichier = $request[$#request],"\n";
    $chemin = "$request[1]";
    for ($i = 2 ; $i < $#request ; $i++)
    {
	$chemin = "$chemin/$request[$i]";
    }
    return ("client" => $client, "path" => $chemin, "file" => $fichier);
}

sub parse_conf
{
    %conf = ();
    open(CONF,"comanche.conf");
    while(<CONF>)
    {
	chomp;
	@tmpset = split('\s',$_) if(/set/);
	@tmproute = split('\s',$_) if(/route/);
	@tmpexec = split('\s',$_) if(/exec/);
	if ($tmpset[0] ne "")
	{
	    $conf{"$tmpset[1]"} = "$tmpset[2]";
	}
	if ($tmproute[0] ne "")
	{
	    $conf{"route1"} = "$tmproute[1]";
	    $conf{"route2"} = "$tmproute[3]";
	}
	if ($tmpexec[0] ne "")
	{
	    $conf{"exec1"} = "$tmpexec[3]";
	    $conf{"exec2"} = "$tmpexec[3]";
	}
	
    }
    return %conf;
}

$requete = "fichier.html";
%params = parse_request($requete);
#print $params{"file"},"\n";

%conf = parse_conf();
#print $conf{"route2"},"\n";

#foreach $k (keys(%conf))
#{
#    print "$k => $conf{$k}\n";
#}
